{"message":"`main` function not found in crate `ming_xu_test`","code":{"code":"E0601","explanation":"No `main` function was found in a binary crate.\n\nTo fix this error, add a `main` function:\n\n```\nfn main() {\n    // Your program will start here.\n    println!(\"Hello world!\");\n}\n```\n\nIf you don't know the basics of Rust, you can look at the\n[Rust Book][rust-book] to get started.\n\n[rust-book]: https://doc.rust-lang.org/book/\n"},"level":"error","spans":[{"file_name":"src\\main.rs","byte_start":0,"byte_end":1895,"line_start":1,"line_end":73,"column_start":1,"column_end":2,"is_primary":true,"text":[{"text":"#[cfg(test)]","highlight_start":1,"highlight_end":13},{"text":"mod sparse {","highlight_start":1,"highlight_end":13},{"text":"    mod two_dimensional {","highlight_start":1,"highlight_end":26},{"text":"        use ming_xu::grid;","highlight_start":1,"highlight_end":27},{"text":"        use ming_xu::grid::Sparse2d;","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        fn get_cut() -> Sparse2d<i64> {","highlight_start":1,"highlight_end":40},{"text":"            grid::Sparse2d::new(1)","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn default_value() {","highlight_start":1,"highlight_end":29},{"text":"            assert_eq!(get_cut().default(), 1);","highlight_start":1,"highlight_end":48},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn contains_not_inserted_row() {","highlight_start":1,"highlight_end":41},{"text":"            assert!(!get_cut().contains_row(0));","highlight_start":1,"highlight_end":49},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn get_inserted_cell() {","highlight_start":1,"highlight_end":33},{"text":"            let mut cut = get_cut();","highlight_start":1,"highlight_end":37},{"text":"            cut.insert(0, 0, 1);","highlight_start":1,"highlight_end":33},{"text":"            assert_eq!(cut.get_unwrapped(0, 0), 1);","highlight_start":1,"highlight_end":52},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn get_not_inserted_cell() {","highlight_start":1,"highlight_end":37},{"text":"            assert_eq!(get_cut().get(0, 0), None);","highlight_start":1,"highlight_end":51},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn only_insert_if_no_value() {","highlight_start":1,"highlight_end":39},{"text":"            let mut cut = get_cut();","highlight_start":1,"highlight_end":37},{"text":"            cut.insert(0, 0, 1);","highlight_start":1,"highlight_end":33},{"text":"            cut.insert(0, 0, 2);","highlight_start":1,"highlight_end":33},{"text":"            assert_eq!(cut.get_unwrapped(0, 0), 1);","highlight_start":1,"highlight_end":52},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn replace_unset_value() {","highlight_start":1,"highlight_end":35},{"text":"            let mut cut = get_cut();","highlight_start":1,"highlight_end":37},{"text":"            cut.replace(0, 0, 1);","highlight_start":1,"highlight_end":34},{"text":"            assert_eq!(cut.get_unwrapped(0, 0), 1);","highlight_start":1,"highlight_end":52},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn replace_set_value() {","highlight_start":1,"highlight_end":33},{"text":"            let mut cut = get_cut();","highlight_start":1,"highlight_end":37},{"text":"            cut.insert(0, 0, 2);","highlight_start":1,"highlight_end":33},{"text":"            cut.replace(0, 0, 1);","highlight_start":1,"highlight_end":34},{"text":"            assert_eq!(cut.get_unwrapped(0, 0), 1);","highlight_start":1,"highlight_end":52},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn modify_value() {","highlight_start":1,"highlight_end":28},{"text":"            let mut cut = get_cut();","highlight_start":1,"highlight_end":37},{"text":"            cut.insert(0, 0, 3);","highlight_start":1,"highlight_end":33},{"text":"            *cut.get_unwrapped_mut(0, 0) -= 1;","highlight_start":1,"highlight_end":47},{"text":"            assert_eq!(cut.get_unwrapped(0, 0), 2);","highlight_start":1,"highlight_end":52},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        #[test]","highlight_start":1,"highlight_end":16},{"text":"        fn get_or_insert() {","highlight_start":1,"highlight_end":29},{"text":"            let mut cut = get_cut();","highlight_start":1,"highlight_end":37},{"text":"            cut.insert(0, 0, 2);","highlight_start":1,"highlight_end":33},{"text":"            assert_eq!(*cut.get_mut_or_insert_default(0, 1), 1);","highlight_start":1,"highlight_end":65},{"text":"            assert_eq!(*cut.get_mut_or_insert_default(0, 0), 2);","highlight_start":1,"highlight_end":65},{"text":"            assert_eq!(*cut.get_mut_or_insert_value(0, 1, 5), 1);","highlight_start":1,"highlight_end":66},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":"consider adding a `main` function to `src\\main.rs`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0601]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: `main` function not found in crate `ming_xu_test`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\main.rs:1:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[cfg(test)]\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod sparse {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mod two_dimensional {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        use ming_xu::grid;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mconsider adding a `main` function to `src\\main.rs`\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0601`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0601`.\u001b[0m\n"}
